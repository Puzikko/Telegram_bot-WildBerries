const TelegramApi = require("node-telegram-bot-api");
const { token } = require("../../env");
const { awaitResolve } = require("../../general/awaitResolve");
const { salesAPI } = require("../../api/axios_instance");

const bot = new TelegramApi(token);

const getSales = async (chatId, date) => { //! –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–¥–∞–∂
    try {
        const response = await salesAPI(date, 1)//? –∑–∞–ø—Ä–æ—Å –Ω–∞ WB

        const arrayOfSales = await response.map(obj => {
            delete obj.lastChangeDate;//?vvv
            delete obj.gNumber;
            delete obj.isSupply;
            delete obj.isRealization;
            delete obj.oblastOkrugName;
            delete obj.odid;
            delete obj.sticker;
            delete obj.srid;//? ^^^^^^ —É–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
            return obj; //? –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
        });
        if (arrayOfSales.length > 0) {
            awaitResolve(chatId, arrayOfSales, 0, translateSales, 5)//? –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        } else { bot.sendMessage(chatId, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ—Ç.') };
    } catch (error) {
        bot.sendMessage(chatId, 'Error:  ' + error.response.data.errors.join('\n'))
    }
};

const getSalesABCanalysis = async (chatId, date) => { //! –û–±—Ä–∞–±–æ—á—Ç–∏–∫ –ø—Ä–æ–¥–∞–∂ -> ABC –∞–Ω–∞–ª–∏–∑
    const newObj = {};
    let newArrayOfArticles = [] //? –º–∞—Å—Å–∏–≤ –¥–ª—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤+
    const regEx = /\d\d\d\d-\d\d/g; //? –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞—Ç—ã –≤ –≤–∏–¥–µ –ì–ì–ì–ì-–ú–ú

    try {
        const response = await salesAPI(date)//? –∑–∞–ø—Ä–æ—Å –Ω–∞ WB
            .then(response => response.filter(x => x.lastChangeDate.match(regEx).join('') === date.match(regEx).join(''))); //? —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ response —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–∞—Ç—ã
        newArrayOfArticles = response.map(x => x.nmId); //? –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞—Ä—Ç–∏–∫—É–ª—ã

        for (let i = 0; i < newArrayOfArticles.length; i++) {
            const title = newArrayOfArticles[i];
            newObj[title] = response.filter(x => x.nmId === title); //? –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –ø–æ —Å–≤–æ–µ–º—É –∞—Ä—Ç–∏–∫—É–ª—É
        };

        const arrayOfSalesABC = Object.keys(newObj).map(x => {
            const arrayOfSalesById = newObj[x];
            return { //? –≤ –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª-–≤–æ –ø—Ä–æ–¥–∞–∂ –∏ –≤—ã–ø–ª–∞—Ç
                nmId: x,
                supplierArticle: arrayOfSalesById[0].supplierArticle,
                category: arrayOfSalesById[0].category,
                subject: arrayOfSalesById[0].subject,
                brand: arrayOfSalesById[0].brand,
                totalSales: arrayOfSalesById.length,
                forPay: arrayOfSalesById.map(x => x.forPay).reduce((acc, cur) => acc + cur, 0)
            }
        });

        if (arrayOfSalesABC.length > 0) {
            awaitResolve(chatId, arrayOfSalesABC, 0, translateSales, 20)//? –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        };
    } catch (error) {
        bot.sendMessage(chatId, 'Error:  ' + error.response.data.errors.join('\n'))
    };
};

module.exports.getSales = getSales;
module.exports.getSalesABCanalysis = getSalesABCanalysis;

const translateSales = {
    gNumber: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
    date: 'üìÖ üïî',
    supplierArticle: 'üéÅ',
    techSize: '–†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞',
    barcode: '–ë–∞—Ä-–∫–æ–¥',
    totalPrice: 'üí≤',
    priceWithDiscount: 'üí∞',
    discountPercent: 'üìâ, %',
    isSupply: '–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏',
    isRealization: '–î–æ–≥–æ–≤–æ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
    promoCodeDiscount: '–°–∫–∏–¥–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É',
    warehouseName: 'üöö',
    countryName: '–°—Ç—Ä–∞–Ω–∞',
    oblastOkrugName: '–û–∫—Ä—É–≥',
    regionName: '–†–µ–≥–∏–æ–Ω',
    incomeID: '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–∫–ª–∞–¥)',
    saleID: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–¥–∞–∂–∏/–≤–æ–∑–≤—Ä–∞—Ç–∞.',
    odid: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞',
    spp: '–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è',
    forPay: '‚ôªÔ∏è',
    finishedPrice: '–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å–∫–∏–¥–æ–∫',
    priceWithDisc: '–¶–µ–Ω–∞, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ forpay',
    nmId: 'üóí –ê—Ä—Ç–∏–∫—É–ª WB',
    subject: '–ü—Ä–µ–¥–º–µ—Ç',
    category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
    brand: '–ë—Ä–µ–Ω–¥',
    IsStorno: '–î–ª—è —Å—Ç–æ—Ä–Ω–æ-–æ–ø–µ—Ä–∞—Ü–∏–π 1, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 0',
    sticker: '–¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞',
    srid: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞',
    totalSales: 'üõí –ü—Ä–æ–¥–∞–Ω–æ',
    forPay: 'üíµ –ö –≤—ã–ø–ª–∞—Ç–µ',
};