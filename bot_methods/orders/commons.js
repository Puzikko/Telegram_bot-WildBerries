const { token } = require("../../env");
const { awaitResolve } = require("../../general/awaitResolve");
const TelegramApi = require("node-telegram-bot-api");

const bot = new TelegramApi(token);

const buttonsWithDate = (chatId, arrayOfDates = []) => { //! –±–ª–æ–∫ —Å inline_buttons –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –≤—á–µ—Ä–∞
	const button = {
		reply_markup: JSON.stringify({ //? –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON-—Ñ–æ—Ä–º–∞—Ç 
			inline_keyboard: [
				[{ text: '–°–µ–≥–æ–¥–Ω—è: ' + arrayOfDates[0], callback_data: arrayOfDates[0] }, //? 1-–∞—è –∫–Ω–æ–ø–∫–∞
				{ text: '–í—á–µ—Ä–∞: ' + arrayOfDates[1], callback_data: arrayOfDates[1] }], //? 2-–∞—è –∫–Ω–æ–ø–∫–∞
				[{ text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', callback_data: 'ordersAtInterval' }] //? 3-—è –∫–Ω–æ–ø–∫–∞
			]
		})
	}

	bot.sendMessage(chatId, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É:', button)
};

const saveAndSendOrders = (orders = [], arrID = [], chatId, translateOrders) => {
	if (orders.length === 0) return arrID;
	let copyOfOrdersID = [...arrID.map(x => x.odid)]; //? –∫–æ–ø–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ ID —Å –∏–º–µ—é—â–∏–º–∏—Å—è –∑–∞–∫–∞–∑–∞–º–∏

	const filteringOrders = orders.filter(x => { //? –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç—ã –∑–∞–∫–∞–∑–∞
		if (copyOfOrdersID.includes(x.odid) === false) {
			return x; //? –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ ID –Ω–µ –±—ã–ª–æ –∑–∞–ø–∏—Å–∞–Ω–æ
		}
	})

	filteringOrders.sort((a, b) => { //? –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Å—Å–∏–≤–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
		return Date.parse(a.date) - Date.parse(b.date); //? –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è –≤ –º—Å –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
	});

	const transformedOrders = transformArray(filteringOrders.map(x => { //? —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
		return JSON.parse(JSON.stringify(x)) //! –ø–µ—Ä–µ–¥–∞—ë–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ (–∏–Ω–∞—á–µ –∏–∑–º–µ–Ω–∏—Ç –æ–±—ä–µ–∫—Ç –∑–∞–∫–∞–∑–∞ –≤ filteringOrders)
	}));
	awaitResolve(chatId, transformedOrders, arrID.length, translateOrders)//? –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
	return [...arrID, ...filteringOrders]; //? –≤–æ–∑–≤—Ä–∞—Ç –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å ID
}



const transformArray = (response = []) => {
	return response.map(obj => {
		delete obj.lastChangeDate; //?vvv
		delete obj.incomeID;
		delete obj.odid;
		delete obj.gNumber;
		delete obj.sticker;
		delete obj.srid;
		if (obj.isCancel === false) {
			delete obj.isCancel;
			delete obj.cancel_dt;
		} //? ^^^^^^ —É–¥–∞–ª–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
		return obj; //? –≤–æ–∑–≤—Ä–∞—Ç –æ–±—ä–µ–∫—Ç–∞
	});
}

const translateOrders = {
	date: 'üìÖ üïî',
	supplierArticle: 'üéÅ',
	techSize: '–†–∞–∑–º–µ—Ä',
	barcode: '–ë–∞—Ä-–∫–æ–¥',
	totalPrice: 'üí≤',
	priceWithDiscount: 'üí∞',
	discountPercent: 'üìâ, %',
	warehouseName: 'üöö',
	oblast: 'üèõ',
	incomeID: '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ (–æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –Ω–∞ —Å–∫–ª–∞–¥)',
	odid: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞',
	nmId: '–ê—Ä—Ç–∏–∫—É–ª WB',
	subject: '–ü—Ä–µ–¥–º–µ—Ç',
	category: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
	brand: '–ë—Ä–µ–Ω–¥',
	isCancel: '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ ‚ùå',
	cancel_dt: 'üìÖ üïî –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞',
	gNumber: '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞',
	sticker: '–¶–∏—Ñ—Ä–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∏–∫–µ—Ä–∞',
	srid: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞',
};

module.exports.translateOrders = translateOrders;
module.exports.transformArray = transformArray;
module.exports.saveAndSendOrders = saveAndSendOrders;
module.exports.buttonsWithDate = buttonsWithDate;